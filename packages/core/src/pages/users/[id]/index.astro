---
import type { UserRecord } from '../../../types/user';
import { UsersQuery } from '../../../lib/users';
import AppLayout from '../../layout/AppLayout.astro';

export const prerender = false;

// 获取用户ID
const { id } = Astro.params;
const userId = parseInt(id || '0');

if (isNaN(userId)) {
    throw new Error('Invalid user ID');
}

// 创建查询实例
const usersQuery = new UsersQuery(Astro.locals);

// 获取用户信息
const user: UserRecord | null = await usersQuery.getUserById(userId);

if (!user) {
    throw new Error('User not found');
}
---

<AppLayout
    title={`用户详情 - ${user.username}`}
    description={`查看用户 ${user.username} 的详细信息`}>
    <div class="user-detail-page">
        <h1>用户详情</h1>

        <div class="user-detail-container">
            <div class="user-info-card">
                <div class="user-avatar">
                    {
                        user.avatar_url ? (
                            <img src={user.avatar_url} alt={user.username} />
                        ) : (
                            <div class="avatar-placeholder">
                                {user.first_name?.charAt(0) ||
                                    user.username.charAt(0)}
                            </div>
                        )
                    }
                </div>

                <div class="user-details">
                    <h2>{user.username}</h2>
                    <p class="user-email">{user.email}</p>

                    <div class="user-meta">
                        <div class="meta-item">
                            <span class="meta-label">角色:</span>
                            <span class="meta-value">
                                <span class="role-tag">{user.role}</span>
                            </span>
                        </div>

                        <div class="meta-item">
                            <span class="meta-label">状态:</span>
                            <span class="meta-value">
                                <span
                                    class={user.is_active
                                        ? 'status-active'
                                        : 'status-inactive'}>
                                    {user.is_active ? '激活' : '未激活'}
                                </span>
                            </span>
                        </div>

                        <div class="meta-item">
                            <span class="meta-label">注册时间:</span>
                            <span class="meta-value">
                                {
                                    new Date(user.created_at).toLocaleString(
                                        'zh-CN',
                                    )
                                }
                            </span>
                        </div>

                        <div class="meta-item">
                            <span class="meta-label">最后更新:</span>
                            <span class="meta-value">
                                {
                                    new Date(user.updated_at).toLocaleString(
                                        'zh-CN',
                                    )
                                }
                            </span>
                        </div>

                        {
                            user.first_name && (
                                <div class="meta-item">
                                    <span class="meta-label">名字:</span>
                                    <span class="meta-value">
                                        {user.first_name}
                                    </span>
                                </div>
                            )
                        }

                        {
                            user.last_name && (
                                <div class="meta-item">
                                    <span class="meta-label">姓氏:</span>
                                    <span class="meta-value">
                                        {user.last_name}
                                    </span>
                                </div>
                            )
                        }
                    </div>

                    <div class="user-actions">
                        <a
                            href={`/users/${user.id}/edit`}
                            class="btn btn-primary">编辑用户</a
                        >
                        <button class="btn btn-danger" id="delete-user-btn"
                            >删除用户</button
                        >
                        <a href="/users" class="btn btn-secondary">返回列表</a>
                    </div>
                </div>
            </div>
        </div>
    </div>
</AppLayout>

<script>
    const deleteButton = document.getElementById('delete-user-btn');
    if (deleteButton) {
        deleteButton.addEventListener('click', async () => {
            if (confirm('确定要删除这个用户吗？此操作不可撤销。')) {
                try {
                    const response = await fetch(
                        `/api/users/${window.location.pathname.split('/')[2]}`,
                        {
                            method: 'DELETE',
                        },
                    );

                    if (response.ok) {
                        alert('用户删除成功');
                        window.location.href = '/users';
                    } else {
                        const result = await response.json();
                        alert('删除失败: ' + (result.error || '未知错误'));
                    }
                } catch (error: any) {
                    alert('删除失败: ' + (error.message || '未知错误'));
                }
            }
        });
    }
</script>

<style>
    .user-detail-page {
        padding: 20px;
        max-width: 800px;
        margin: 0 auto;
    }

    .user-detail-container {
        background: white;
        padding: 20px;
        border-radius: 8px;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    }

    .user-info-card {
        display: flex;
        gap: 30px;
    }

    .user-avatar {
        flex-shrink: 0;
    }

    .avatar-placeholder {
        width: 100px;
        height: 100px;
        border-radius: 50%;
        background: #2563eb;
        display: flex;
        align-items: center;
        justify-content: center;
        color: white;
        font-size: 2rem;
        font-weight: bold;
    }

    .user-avatar img {
        width: 100px;
        height: 100px;
        border-radius: 50%;
        object-fit: cover;
    }

    .user-details {
        flex: 1;
    }

    .user-email {
        color: #6b7280;
        margin-bottom: 20px;
    }

    .user-meta {
        display: grid;
        gap: 15px;
        margin-bottom: 30px;
    }

    .meta-item {
        display: flex;
        gap: 10px;
    }

    .meta-label {
        font-weight: 600;
        width: 80px;
    }

    .meta-value {
        flex: 1;
    }

    .role-tag {
        background: #dbeafe;
        color: #1d4ed8;
        padding: 2px 8px;
        border-radius: 12px;
        font-size: 0.8em;
        font-weight: 500;
    }

    .status-active {
        color: #10b981;
        font-weight: bold;
    }

    .status-inactive {
        color: #ef4444;
        font-weight: bold;
    }

    .user-actions {
        display: flex;
        gap: 10px;
        flex-wrap: wrap;
    }

    .btn {
        padding: 8px 16px;
        border: none;
        border-radius: 4px;
        cursor: pointer;
        font-size: 14px;
        text-decoration: none;
        display: inline-block;
    }

    .btn-primary {
        background: #2563eb;
        color: white;
    }

    .btn-secondary {
        background: #6b7280;
        color: white;
    }

    .btn-danger {
        background: #ef4444;
        color: white;
    }
</style>
