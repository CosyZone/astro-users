---
import type { UserRecord } from '../types/user';
import { UsersQuery } from '../lib/users';
import AppLayout from './layout/AppLayout.astro';
import { Alert, Button, Container, Heading, Link } from '@coffic/cosy-ui';
import SignupForm from '../components/SignupForm.astro';

export const prerender = false;

// 处理表单提交
let signupError: string | null = null;
let signupSuccess = false;

if (Astro.request.method === 'POST') {
    try {
        const formData = await Astro.request.formData();
        const usersQuery = new UsersQuery(Astro.locals);

        const username = formData.get('username') as string;
        const email = formData.get('email') as string;
        const password = formData.get('password') as string;
        const confirmPassword = formData.get('confirm_password') as string;
        const firstName = (formData.get('first_name') as string) || null;
        const lastName = (formData.get('last_name') as string) || null;

        // 验证必填字段
        if (!username || !email || !password || !confirmPassword) {
            signupError = '所有字段都是必填的';
        }
        // 验证密码确认
        else if (password !== confirmPassword) {
            signupError = '密码和确认密码不匹配';
        }
        // 验证密码长度
        else if (password.length < 6) {
            signupError = '密码长度至少为6个字符';
        } else {
            // 检查用户名是否已存在
            const existingUserByUsername =
                await usersQuery.getUserByUsername(username);
            if (existingUserByUsername) {
                signupError = '用户名已存在';
            } else {
                // 检查邮箱是否已存在
                const existingUserByEmail =
                    await usersQuery.getUserByEmail(email);
                if (existingUserByEmail) {
                    signupError = '邮箱已被注册';
                } else {
                    // 创建新用户
                    const newUser = await usersQuery.createUser({
                        username,
                        email,
                        password, // 注意：在实际应用中应该对密码进行哈希处理
                        first_name: firstName,
                        last_name: lastName,
                        avatar_url: null,
                        role: 'user', // 注册用户默认为普通用户
                        is_active: true, // 新注册用户默认激活
                    });

                    if (newUser) {
                        signupSuccess = true;
                        signupError = null;
                    } else {
                        signupError = '注册失败，请稍后重试';
                    }
                }
            }
        }
    } catch (error) {
        console.error('用户注册错误:', error);
        signupError = '注册过程中发生错误: ' + (error as Error).message;
    }
}
---

<AppLayout title="用户注册" description="创建新的用户账户" showSidebar={false}>
    <Container width="md" background="accent/10">
        <Heading level={1}>用户注册</Heading>

        <Link href="/login" btn> 登录 </Link>

        <SignupForm signupSuccess={signupSuccess} signupError={signupError} />
    </Container>
</AppLayout>

<style>
    .signup-container {
        background: white;
        padding: 20px;
        border-radius: 8px;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        margin: 20px 0;
    }

    .signup-form {
        display: grid;
        grid-template-columns: 1fr;
        gap: 15px;
    }

    .form-group {
        display: flex;
        flex-direction: column;
    }

    .form-group label {
        margin-bottom: 5px;
        font-weight: 500;
    }

    .form-group input {
        padding: 8px 12px;
        border: 1px solid #d1d5db;
        border-radius: 4px;
        font-size: 14px;
    }

    .form-group small {
        margin-top: 4px;
        color: #6b7280;
        font-size: 0.875rem;
    }

    .form-actions {
        display: flex;
        gap: 10px;
        justify-content: flex-start;
        margin-top: 10px;
    }
</style>
